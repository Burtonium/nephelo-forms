// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

enum FieldType {
  MAIN_TITLE
  TITLE
  LABEL
  MULTIPLE_CHOICE
  QUESTION
  CHOICE
  UNIT
}

model Field {
  id       String    @id @default(cuid())
  type     FieldType
  index    Int
  data     Json
  form     Form      @relation(fields: [formId], references: [id])
  formId   String
  parentId String?
  children Field[]   @relation("Parent")
  parent   Field?    @relation("Parent", fields: [parentId], references: [id])
  entries  FieldEntry[]
}

model Form {
  id           String   @id @default(cuid())
  fields       Field[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  entries      FormEntry[]
  createdBy    User?   @relation(fields: [createdById], references: [id])
  createdById  String?
}

model FormEntry {
  id           String   @id @default(cuid())
  formId       String
  form         Form      @relation(fields: [formId], references: [id])
  fieldEntries FieldEntry[]
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  createdAt DateTime     @default(now())
}

enum FieldEntryType {
  NUMERIC
  STRING
  BOOLEAN
}

model FieldEntry {
  id        Int         @id @default(autoincrement())
  type      FieldEntryType
  entryId   String
  entry     FormEntry  @relation(fields: [entryId], references: [id])
  fieldId   String 
  field     Field     @relation(fields: [fieldId], references: [id])
  value     String?  // @db.Text
  decimal   Decimal?

  @@unique([fieldId, entryId])
}


// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
  entries       FormEntry[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
